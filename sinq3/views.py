from sinq3.models import Question
from sinq3.models import QuestionImage

from django.http import HttpResponseRedirect, HttpResponse
from django.core.urlresolvers import reverse
from django.template import Context, loader

from django.template import RequestContext

from django.http import Http404

from django.shortcuts import render_to_response

# Import forms:
from sinq3.forms import QuestionForm
from sinq3.forms import QuestionImageForm

from django.core import serializers

# For @csrf_exempt decorator (https://docs.djangoproject.com/en/1.2/ref/contrib/csrf/#exceptions).  This is needed for POSTs that do not have a CSRF token (generated by Django).
from django.views.decorators.csrf import csrf_exempt

# Create your views here.

def home(request):
	t = loader.get_template('home.html')
	c = Context({})
	return HttpResponse(t.render(c))

def question_index(request):

	latest_question_list = Question.objects.all()
	#.order_by('-creation_timestamp')[:5]
	#if len(latest_question_list) > 0: # this is not efficient, use next line:
	if latest_question_list.count() > 0:
		output = ', '.join([q.text for q in latest_question_list])
	else:
		output = 'no questions!'
	t = loader.get_template('questions/index.html')
	c = Context({
			'latest_question_list': latest_question_list
		})
	return HttpResponse(t.render(c))

def question_create(request):
	if request.method == 'POST':
		form = QuestionForm(request.POST, request.FILES)
		if form.is_valid():
			# Create new question image and store in DB
			question_text = request.POST['question_text']

			question = Question(text = question_text)
			question.save()

			return HttpResponseRedirect(reverse('sinq3.views.question_view', args=(question.id,)))
	else:
		form = QuestionForm() # An empty, unbound form

	return render_to_response(
			'questions/question_create.html',
			{
				'form': form
			},
			context_instance=RequestContext(request)
		)	

@csrf_exempt
def question_json(request):

	question_list = Question.objects.all()
	#.order_by('-creation_timestamp')[:5]
	#if len(latest_question_list) > 0: # this is not efficient, use next line:

	# Serialize questions in JSON format
	# i.e., https://docs.djangoproject.com/en/dev/topics/serialization/
	serialized_questions = serializers.serialize('json', question_list, fields=('text'))

	return HttpResponse(serialized_questions, mimetype="application/json")

@csrf_exempt
def question_id_json(request, question_id):

	try:
		question = Question.objects.get(id=question_id)
	except:
		raise Http404

	# Serialize questions in JSON format
	# i.e., https://docs.djangoproject.com/en/dev/topics/serialization/
	serialized_questions = serializers.serialize('json', [question], fields=('text'))

	return HttpResponse(serialized_questions, mimetype="application/json")

def question_edit(request, question_id):
	try:
		question = Question.objects.get(id=question_id)
	except:
		raise Http404

	if request.method == 'POST':
		form = QuestionForm(request.POST)
		if form.is_valid():
			# Update question properties
			question.text = request.POST['question_text']
			question.save()

			return HttpResponseRedirect(reverse('sinq3.views.question_view', args=(question.id,)))
	else:
		form = QuestionForm() # An empty, unbound form

	return render_to_response(
			'questions/question_edit.html',
			{
				'question': question,
				'form': form
			},
			context_instance=RequestContext(request)
		)

@csrf_exempt
def question_id_image_json(request, question_id):
	try:
		question = Question.objects.get(id=question_id)
		question_images = QuestionImage.objects.filter(question_id=question.id)
	except:
		raise Http404

	# Serialize questions in JSON format
	# i.e., https://docs.djangoproject.com/en/dev/topics/serialization/
	serialized_questions = serializers.serialize('json', question_images)

	return HttpResponse(serialized_questions, mimetype="application/json")	
	



	# try:
	# 	q = Question.objects.get(id=question_id)
	# except:
	# 	raise Http404

	# # Try to get POST data.
	# try:
	# 	question_text = request.POST['question_text']

	# 	question_image = request.FILES['question_image'] # uploaded image as a UploadedFile Django object
	# 	handle_uploaded_file(question_image)
	# except(KeyError, Question.DoesNotExist):
	# 	# Re-display question edit form.
	# 	t = loader.get_template('questions/question_edit.html')
	# 	# c = Context({
	# 	# 	'question': q
	# 	# 	})
	# 	c = RequestContext(request, {
	# 		'question': q
	# 	})
	# 	return HttpResponse(t.render(c))
	# # This follows all except clauses and is executed if no exceptions are raised.  Therefore, it's executed of the try succeeds.
	# else:
	# 	q.text = question_text
	# 	q.save()
	# 	# ALWAYS return an HttpResponseRedirect after successfully dealing with POST data.
	# 	# Note that reverse() returns a URL from the URLconf in sinq3/urls.py.
	# 	return HttpResponseRedirect(reverse('sinq3.views.question_view', args=(q.id,)))

def question_view(request, question_id):
	try:
		q = Question.objects.get(id=question_id)
	except:
		raise Http404

	# Display the question
	t = loader.get_template('questions/question_view.html')
	c = Context({
			'question': q
		})

	return HttpResponse(t.render(c))

@csrf_exempt
def question_image_create(request, question_id):
	# Get question to which the image will be attached.
	try:
		question = Question.objects.get(id=question_id)
	except:
		raise Http404

	# Save photo if POST
	if request.method == 'POST':
		form = QuestionImageForm(request.POST, request.FILES)

		if form.is_valid():
			# Create new question image and store in DB
			new_question_image          = QuestionImage(image = request.FILES['question_image'])
			new_question_image.question = question
			new_question_image.save()

			return HttpResponseRedirect(reverse('sinq3.views.question_view', args=(question.id,)))
	else:
		form = QuestionImageForm() # An empty, unbound form

	return render_to_response(
			'question_images/create.html',
			{
				'question': question,
				'form': form
			},
			context_instance=RequestContext(request)
		)
